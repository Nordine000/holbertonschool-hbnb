# Test Examples for Place API

# Prerequisites: You need to have users and amenities created first
# 1. Create a user (assuming you have user endpoints)
curl -X POST http://localhost:5000/api/v1/users/ \
  -H "Content-Type: application/json" \
  -d '{
    "first_name": "John",
    "last_name": "Doe",
    "email": "john.doe@example.com"
  }'

# 2. Create some amenities
curl -X POST http://localhost:5000/api/v1/amenities/ \
  -H "Content-Type: application/json" \
  -d '{"name": "Wi-Fi"}'

curl -X POST http://localhost:5000/api/v1/amenities/ \
  -H "Content-Type: application/json" \
  -d '{"name": "Air Conditioning"}'

# ==== PLACE TESTS ====

# 1. Register a New Place (POST /api/v1/places/)
curl -X POST http://localhost:5000/api/v1/places/ \
  -H "Content-Type: application/json" \
  -d '{
    "title": "Cozy Apartment",
    "description": "A nice place to stay",
    "price": 100.0,
    "latitude": 37.7749,
    "longitude": -122.4194,
    "owner_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
    "amenities": ["4fa85f64-5717-4562-b3fc-2c963f66afa6", "5fa85f64-5717-4562-b3fc-2c963f66afa6"]
  }'

# Expected Response: 201 Created
# {
#   "id": "1fa85f64-5717-4562-b3fc-2c963f66afa6",
#   "title": "Cozy Apartment",
#   "description": "A nice place to stay",
#   "price": 100.0,
#   "latitude": 37.7749,
#   "longitude": -122.4194,
#   "owner_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
# }

# 2. Register Another Place
curl -X POST http://localhost:5000/api/v1/places/ \
  -H "Content-Type: application/json" \
  -d '{
    "title": "Beach House",
    "description": "Beautiful oceanfront property",
    "price": 250.0,
    "latitude": 34.0522,
    "longitude": -118.2437,
    "owner_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
    "amenities": ["4fa85f64-5717-4562-b3fc-2c963f66afa6"]
  }'

# 3. Retrieve All Places (GET /api/v1/places/)
curl -X GET http://localhost:5000/api/v1/places/ \
  -H "Content-Type: application/json"

# Expected Response: 200 OK
# [
#   {
#     "id": "1fa85f64-5717-4562-b3fc-2c963f66afa6",
#     "title": "Cozy Apartment",
#     "latitude": 37.7749,
#     "longitude": -122.4194
#   },
#   {
#     "id": "2fa85f64-5717-4562-b3fc-2c963f66afa6",
#     "title": "Beach House",
#     "latitude": 34.0522,
#     "longitude": -118.2437
#   }
# ]

# 4. Retrieve Place Details (GET /api/v1/places/<place_id>)
curl -X GET http://localhost:5000/api/v1/places/1fa85f64-5717-4562-b3fc-2c963f66afa6 \
  -H "Content-Type: application/json"

# Expected Response: 200 OK
# {
#   "id": "1fa85f64-5717-4562-b3fc-2c963f66afa6",
#   "title": "Cozy Apartment",
#   "description": "A nice place to stay",
#   "latitude": 37.7749,
#   "longitude": -122.4194,
#   "owner": {
#     "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
#     "first_name": "John",
#     "last_name": "Doe",
#     "email": "john.doe@example.com"
#   },
#   "amenities": [
#     {
#       "id": "4fa85f64-5717-4562-b3fc-2c963f66afa6",
#       "name": "Wi-Fi"
#     },
#     {
#       "id": "5fa85f64-5717-4562-b3fc-2c963f66afa6",
#       "name": "Air Conditioning"
#     }
#   ]
# }

# 5. Update a Place (PUT /api/v1/places/<place_id>)
curl -X PUT http://localhost:5000/api/v1/places/1fa85f64-5717-4562-b3fc-2c963f66afa6 \
  -H "Content-Type: application/json" \
  -d '{
    "title": "Luxury Condo",
    "description": "An upscale place to stay",
    "price": 200.0
  }'

# Expected Response: 200 OK
# {
#   "message": "Place updated successfully"
# }

# ==== ERROR CASES ====

# 1. Invalid price (negative)
curl -X POST http://localhost:5000/api/v1/places/ \
  -H "Content-Type: application/json" \
  -d '{
    "title": "Invalid Place",
    "price": -50.0,
    "latitude": 37.7749,
    "longitude": -122.4194,
    "owner_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
  }'
# Expected: 400 Bad Request - "Price must be non-negative"

# 2. Invalid latitude (out of range)
curl -X POST http://localhost:5000/api/v1/places/ \
  -H "Content-Type: application/json" \
  -d '{
    "title": "Invalid Place",
    "price": 100.0,
    "latitude": 95.0,
    "longitude": -122.4194,
    "owner_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
  }'
# Expected: 400 Bad Request - "Latitude must be between -90 and 90"

# 3. Invalid longitude (out of range)
curl -X POST http://localhost:5000/api/v1/places/ \
  -H "Content-Type: application/json" \
  -d '{
    "title": "Invalid Place",
    "price": 100.0,
    "latitude": 37.7749,
    "longitude": 200.0,
    "owner_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
  }'
# Expected: 400 Bad Request - "Longitude must be between -180 and 180"

# 4. Non-existent owner
curl -X POST http://localhost:5000/api/v1/places/ \
  -H "Content-Type: application/json" \
  -d '{
    "title": "Orphan Place",
    "price": 100.0,
    "latitude": 37.7749,
    "longitude": -122.4194,
    "owner_id": "non-existent-id"
  }'
# Expected: 400 Bad Request - "Owner not found"

# 5. Non-existent amenity
curl -X POST http://localhost:5000/api/v1/places/ \
  -H "Content-Type: application/json" \
  -d '{
    "title": "Place with Bad Amenity",
    "price": 100.0,
    "latitude": 37.7749,
    "longitude": -122.4194,
    "owner_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
    "amenities": ["non-existent-amenity-id"]
  }'
# Expected: 400 Bad Request - "Amenity with ID non-existent-amenity-id not found"

# 6. Get non-existent place
curl -X GET http://localhost:5000/api/v1/places/non-existent-id \
  -H "Content-Type: application/json"
# Expected: 404 Not Found

# 7. Update non-existent place
curl -X PUT http://localhost:5000/api/v1/places/non-existent-id \
  -H "Content-Type: application/json" \
  -d '{
    "title": "Updated Title"
  }'
# Expected: 404 Not Found
