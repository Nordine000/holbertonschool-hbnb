sequenceDiagram
    participant Client
    participant API as Presentation Layer<br/>(ServiceAPI)
    participant BL as Business Logic Layer<br/>(FacadeBL)
    participant ReviewModel as Review Model
    participant UserModel as User Model
    participant PlaceModel as Place Model
    participant DB as Persistence Layer<br/>(FacadeDB)

    Client->>API: POST /reviews<br/>{placeId, userId, rating, comment}
    API->>BL: submitReview(reviewData)
    
    BL->>UserModel: verifyUserExists(userId)
    UserModel->>DB: getUserById(userId)
    DB-->>UserModel: user data
    UserModel-->>BL: user verified
    
    BL->>PlaceModel: verifyPlaceExists(placeId)
    PlaceModel->>DB: getPlaceById(placeId)
    DB-->>PlaceModel: place data
    PlaceModel-->>BL: place verified
    
    BL->>ReviewModel: checkExistingReview(userId, placeId)
    ReviewModel->>DB: findExistingReview(userId, placeId)
    DB-->>ReviewModel: existing review check
    ReviewModel-->>BL: review check result
    
    alt no existing review and valid data
        BL->>ReviewModel: validateReviewData(reviewData)
        ReviewModel-->>BL: validation result
        BL->>ReviewModel: createReview(reviewData)
        ReviewModel->>ReviewModel: generateUniqueId()
        ReviewModel->>ReviewModel: setCreationDateTime()
        BL->>DB: saveReview(reviewObject)
        DB->>DB: insertReviewToDatabase()
        DB-->>BL: review saved successfully
        BL-->>API: review created with ID
        API-->>Client: 201 Created<br/>{reviewId, message: "Review submitted"}
    else review already exists or invalid data
        BL-->>API: error message
        API-->>Client: 400 Bad Request<br/>{error}
    end